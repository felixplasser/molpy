#!/usr/bin/python

# Penny is a program that can read Molcas HDF5 and INPORB formats,
# print the orbitals (and other info) and store the wavefunction
# information in a range of formats (Molcas HDF5, Molcas INPORB,
# Molden formatted file, Gaussian formatted checkpoint file)

# The purpose of this program is to be able to use Molcas data in other
# programs, connecting Molcas a wider world.
# This program is named after Penny river in Alaska,
# connecting the land to the sea, and eventually to the ocean.

# Steven Vancoillie, summer-fall 2015

import os
import argparse

import molpy


def argument_parser():
    parser = argparse.ArgumentParser(
        description="""
        Orbital analysis for Molcas HDF5 files.
        """)
    parser.add_argument(
        'infile',
        type=str,
        help='name of the Molcas INPORB/HDF5 input file'
        )
    parser.add_argument(
        '-o',
        '--outfile',
        type=str,
        help='name of the output file'
        )

    parser.add_argument(
        '-p',
        '--print_orbitals',
        action='store_true',
        help='print orbitals'
        )
    parser.add_argument(
        '-f',
        '--force',
        action='store_true',
        help='force output file overwrite'
        )
    parser.add_argument(
        '--molden',
        action='store_true',
        help='generate Molden format file'
        )
    parser.add_argument(
        '--fchk',
        action='store_true',
        help='generate Guassian formatted checkpoint file'
        )
    parser.add_argument(
        '--mh5',
        action='store_true',
        help='generate Molcas HDF5 file'
        )
    parser.add_argument(
        '--inporb',
        action='store_true',
        help='generate Molcas INPORB file'
        )

    parser.add_argument(
        '--linewidth',
        type=int,
        default=10,
        help='number of orbitals printed on a line'
        )
    parser.add_argument(
        '-d',
        '--desymmetrize',
        action='store_true',
        help='remove symmetry from the orbitals'
        )
    parser.add_argument(
        '-m',
        '--match',
        type=str,
        help='only print basis functions with matching label'
        )
    parser.add_argument(
        '-t',
        '--typeids',
        type=str,
        nargs='*',
        choices=('f', 'i', '1', '2', '3', 's', 'd'),
        help='only print MOs with selected type ids'
        )
    parser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        help='show informational messages'
        )
    parser.add_argument(
        '-w',
        '--warnings',
        action='store_true',
        help='show warning messages (e.g. about missing data)'
        )

    return parser


def driver():
    args = argument_parser().parse_args()
    verbose = args.verbose
    warnings = args.warnings

    def check_outfile(outpath):
        if os.path.isfile(outpath) and not args.force:
            raise molpy.errors.UserError(
                """
                the requested output file already exists

                To continue, please remove the file, use the
                -f/--force option to overwrite the file, or
                give another name with the -o/--outfile option
                """)

    filename = args.infile
    if (filename.endswith('.h5')):
        wfn = molpy.gen_from_mh5(filename)
    else:
        pass

    base, ext = os.path.splitext(args.infile)

    if args.inporb:
        outpath = args.outfile or '.'.join((base, 'inporb'))
        check_outfile(outpath)
        f = molpy.MolcasINPORB(outpath, 'w')
        f.write(wfn)

    if args.molden:
        outpath = args.outfile or '.'.join((base, 'molden'))
        check_outfile(outpath)
        f = molpy.MolcasMOLDEN(outpath, 'w')
        f.write(wfn)

    if args.mh5:
        outpath = args.outfile or '.'.join((base, 'mh5'))
        check_outfile(outpath)
        f = molpy.MolcasHDF5(outpath, 'w')
        f.write(wfn)

    if args.fchk:
        outpath = args.outfile or '.'.join((base, 'fchk'))
        check_outfile(outpath)
        f = molpy.MolcasFCHK(outpath, 'w')
        f.write(wfn)

    if args.print_orbitals:
        molpy.tools.print_header('Molecular Orbitals')
        wfn.print_orbitals(types=args.typeids, pattern=args.match)

if __name__ == '__main__':
    driver()
